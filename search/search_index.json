{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MoBrix-backend","text":"<p>An intuitive Express.js wrapper, to easily build an expressjs backend with a simplified configuration</p> <p></p>"},{"location":"Changelog/","title":"Changelog","text":""},{"location":"Changelog/#versions","title":"Versions","text":"<ul> <li>1.1.0</li> <li>1.0.0</li> </ul>"},{"location":"Changelog/#changes","title":"Changes","text":""},{"location":"Changelog/#110","title":"1.1.0","text":"<ul> <li>Better fallback strategy</li> <li>Clean-up</li> <li>Refactoring</li> </ul>"},{"location":"Changelog/#100","title":"1.0.0","text":"<ul> <li>MoBrix-backend library setup</li> </ul>"},{"location":"License/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2023 Cataldo Cianciaruso</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api/configuration/","title":"Configuration parameters","text":"Parameter Description Default value callback Custom function to interact directly with internal Expressjs app / get Custom Expressjs app <code>get</code> handlers array. Every handler is composed by a path and a callback function [] middlewares Custom middlewares function loaded into the Express app [] onListen Custom function called everytime the backend app is listening for incoming requests / port Custom Expressjs app listening port 3000 post Custom Expressjs app <code>post</code> handlers array. Every handler is composed by a path and a callback function [] routers Custom Expressjs app <code>routers</code> array. Every handler is composed by a path and a Router []"},{"location":"api/configuration/#callback","title":"callback","text":"<p>Custom function to interact directly with internal Expressjs app</p>"},{"location":"api/configuration/#get","title":"get","text":"<p>Custom Expressjs app <code>get</code> handlers array. Every handler is composed by a path and a callback function</p>"},{"location":"api/configuration/#middlewares","title":"middlewares","text":"<p>Custom Expressjs app middlewares function loaded into the Express app</p>"},{"location":"api/configuration/#onlisten","title":"onListen","text":"<p>Custom function called everytime the backend app is listening for incoming requests</p>"},{"location":"api/configuration/#port","title":"port","text":"<p>Custom Expressjs app listening port</p>"},{"location":"api/configuration/#post","title":"post","text":"<p>Custom Expressjs app <code>post</code> handlers array. Every handler is composed by a path and a callback function</p>"},{"location":"api/configuration/#routers","title":"routers","text":"<p>Custom Expressjs app <code>routers</code> array. Every handler is composed by a path and a Router</p>"},{"location":"guide/get-started/","title":"Getting started","text":""},{"location":"guide/get-started/#installation","title":"Installation","text":"<p>If you want to use this library inside your project, just install it:</p> <pre><code>\nnpm i mobrix-backend\n\n</code></pre> <p></p>"},{"location":"guide/get-started/#usage","title":"Usage","text":"<p>Once installed, you can import this library in your project and use it. An example MoBrix-backend app is deployed here , accept both GET and POST requests. Give a try !</p> <p></p>"},{"location":"guide/get-started/#basic-example","title":"Basic example","text":"<p>This is a basic example, with just a standard MoBrix-backend init:</p> <pre><code>import { startMbxBackend } from \"mobrix-backend\";\n\nstartMbxBackend();\n</code></pre> <p>We can see the default page by navigating to <code>localhost:3000</code>:</p> <p> </p>"},{"location":"guide/get-started/#advanced-example","title":"Advanced example","text":"<p>This example inits and starts a MoBrix-backend instance using the configuration parameters. It will listens at port 3000, with 3 GET handlers, a custom callback and a router:</p> <pre><code>import { Request, Response, Router, startMbxBackend } from \"mobrix-backend\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst port = process.env.PORT || 3000;\n\nconst router = Router();\n\nconst timeLog = (req: any, res: any, next: () =&gt; void) =&gt; {\n  console.log(\"Time: \", Date.now());\n  next();\n};\n\nrouter.get(\"/\", (req, res) =&gt; {\n  res.send(\"router 1 - Main\");\n});\n\nrouter.get(\"/router1-r1\", (req, res) =&gt; {\n  res.send(\"router 1 - Route 1\");\n});\n\nstartMbxBackend({\n  callback: (app) =&gt; {\n    app.use(timeLog);\n  },\n  port: Number(port),\n  onListen: () =&gt; {\n    console.log(`[server]: Server is running at http://localhost:${port}`);\n  },\n  routers: [{ path: \"/router1\", router }],\n  get: [\n    {\n      path: \"/\",\n      callback: (req: Request, res: Response) =&gt; {\n        res.send(\"MoBrix-backend Server\");\n      },\n    },\n    {\n      path: \"/r1\",\n      callback: (req: Request, res: Response) =&gt; {\n        res.send(\"Main path - Route 1\");\n      },\n    },\n    {\n      path: \"/r2\",\n      callback: (req: Request, res: Response) =&gt; {\n        res.send(\"Main path - Route 2\");\n      },\n    },\n  ],\n});\n</code></pre> <p></p>"}]}